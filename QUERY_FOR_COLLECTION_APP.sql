
-- creration of table plan_master
CREATE TABLE plan_master(

    PL_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    PL_AMOUNT VARCHAR(50)
);

-- cretrion of table agents_master
CREATE TABLE agent_master(
    AGENT_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    AGENT_NAME VARCHAR(50),
    AGENT_PH_NO VARCHAR(25),
    AGENT_LOCATION INT,
    AGENT_DL_STATUS INT DEFAULT 1,
    AGENT_CREATED_AT DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (AGENT_LOCATION) REFERENCES place_master(PLACE_ID)
);
-- creation of table place_master
CREATE TABLE place_master(

    PLACE_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    PLACE_NAME VARCHAR(50),
    PLACE_DL_STATUS INT DEFAULT 1,
    PLACE_CREATED_AT DATE DEFAULT CURRENT_DATE
);
-- creation of customer_master table
CREATE TABLE customer_master(

    CUS_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    CUS_NAME VARCHAR(50),
    CUS_SUR_NAME VARCHAR(50),
    CUS_PM_PH_NO VARCHAR(50) NOT NULL,
    CUS_SE_PH_NO VARCHAR(50) DEFAULT NULL,
    CUS_PLACE_ID INT NOT NULL ,
    CUS_REF_BY INT NOT NULL COMMENT 'THIS HAVE DEFAULT VALUE FROM AEGENT MASTER OF BY ADMIN ID 1 AND status WILL BE 0 		FOR THAT ROW',
    CUS_PLAN_ID INT NOT NULL,
    CUS_DL_STATUS INT DEFAULT 1,
    CUS_COM_ONE INT DEFAULT 0,
    CUS_COM_TWO INT DEFAULT 0,
    CUS_CREATED_AT DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY(CUS_PLACE_ID) REFERENCES place_master(PLACE_ID),
    FOREIGN kEY(CUS_REF_BY) REFERENCES agent_master(AGENT_ID),
    FOREIGN kEY( CUS_PLAN_ID) REFERENCES plan_master(PL_ID)
);

-- creation collection_master table
CREATE TABLE `collection_master` (
  `COL_ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `COL_FOR_CUS_ID` bigint(20) NOT NULL,
  `CUS_TOTAL_DUE` bigint(20) NOT NULL COMMENT 'TOTAL AMOUNT NEED TO BE PAID BY CUSTOMER  INSERT  BY MULTIPLYING THE PLAN AMOUNT AND INSERTING HERE',
  `COL_DUE_BALANCE` bigint(20) NOT NULL DEFAULT 0,
  `COL_DUE_LAST_BALANCE` bigint(20) NOT NULL DEFAULT 0 COMMENT "IT SHOWS THE RECORD OF LAST BALANCE BEFORE NEXT NEW",
  `CL_LAST_UPDATED_ON` date NOT NULL DEFAULT curdate(),
  `CL_CREATED_ON` date DEFAULT curdate()
)




-- TRIGGER
-- INSERT INTO collection_master AFTER INSERTION ON customer_master
INSERT INTO `collection_master` (`COL_FOR_CUS_ID`)
VALUES (new.CUS_ID)

-- DIRECT QUERY
DROP TRIGGER IF EXISTS `INSERT_INTO_COLLECTION_LIST`;
CREATE DEFINER=`root`@`localhost` TRIGGER `INSERT_INTO_COLLECTION_LIST`
AFTER INSERT ON `customer_master` FOR EACH ROW
INSERT INTO `collection_master` (`COL_FOR_CUS_ID`, `COL_TB_CUS_PL`,`CL_LAST_PAID_TO`)
VALUES (new.CUS_ID,NEW.CUS_PLAN_ID,1)



-- STORED PROCEDURE TO GET ALL COLLECTION LIST
DELIMITER //

CREATE PROCEDURE super_collection_list()

BEGIN
   SELECT * FROM customer_master,plan_master,collection_master WHERE
   collection_master.COL_FOR_CUS_ID=customer_master.CUS_ID
   AND collection_master.COL_TB_CUS_PL=plan_master.PL_ID;
END//

DELIMITER ;

-- STORED PROCEDURE TO GET A SINGLE CUSTOMER COLLECTION LIST
DELIMITER //
CREATE PROCEDURE get_collection_of_customer(IN CUS_ID INT)
BEGIN
  SELECT * FROM collection_master,plan_master WHERE collection_master.COL_TB_CUS_PL=plan_master.PL_ID
  AND collection_master.COL_FOR_CUS_ID=CUS_ID;
END//

DELIMITER ;



-- CREATION OF TRANSACTION MASTER
CREATE TABLE transaction_master(
	TR_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    TR_OF_CUS INT,
    TR_OF_PL_ID INT,
    TR_DONE_TO INT COMMENT "TRANSACTION DONE BY ADMIN",
    TR_PAID_AMOUNT VARCHAR(10) COMMENT "AMOUNT PAID ON TRANSACTION",
    TR_ON_DATE DATE DEFAULT CURRENT_DATE,
    TR_ON_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (TR_OF_CUS) REFERENCES customer_master(CUS_ID),
    FOREIGN KEY (TR_OF_PL_ID) REFERENCES plan_master(PL_ID),
    FOREIGN KEY (TR_DONE_TO) REFERENCES admin_login(ADMIN_ID)
	);


-- GENRATING THE NEW ID BEFORE INSERTING
SELECT MAX(`CUS_ID`) FROM `customer_master` WHERE 1;


-- VIEW FOR COLLECTION_LIST VIEW
CREATE VIEW Collection_list_view AS
SELECT *
FROM customer_master,place_master,plan_master,SCHEME_MASTER,collection_master
WHERE customer_master.CUS_ID=collection_master.COL_FOR_CUS_ID AND
customer_master.CUS_PLACE_ID=place_master.PLACE_ID AND
customer_master.CUS_PLAN_ID=plan_master.PL_ID ;